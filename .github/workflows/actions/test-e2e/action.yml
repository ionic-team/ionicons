name: 'Test E2E'
description: 'Test E2E'
inputs:
  shard:
    description: 'Playwright Test Shard (ex: 2)'
  totalShards:
    description: 'Playwright total number of test shards (ex: 4)'
  update:
    description: 'Whether or not to update the reference snapshots'
runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@v3

    - name: Cache Node Modules
      uses: actions/cache@v3
      env:
        cache-name: node-modules
      with:
        path: ./node_modules
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package-lock.json') }}-v1
    - uses: ./.github/workflows/actions/download-archive
      with:
        name: ionicons-build
        path: .
        filename: IoniconsBuild.zip
    - uses: ./.github/workflows/actions/download-archive
      with:
        name: ionicons-src
        path: .
        filename: IoniconsSrc.zip
    - name: Install Playwright Dependencies
      run: npx playwright install && npx playwright install-deps
      shell: bash
    - name: Test
      if: inputs.update != 'true'
      run: npx playwright test --shard=${{ inputs.shard }}/${{ inputs.totalShards }}
      shell: bash
    - name: Test and Update
      id: test-and-update
      if: inputs.update == 'true'
      # Keep track of the files that were
      # changed so they can be correctly restored
      # in the combine step.
      # To do this, we move only the changed files
      # to a separate directory, while preserving the
      # directory structure of the source.
      # When, we create and archive of these results
      # so that the combine step can simply
      # unzip and move the changed files into place.
      # We have extra logic added so that job runners
      # that do not have any new screenshots do not create
      # an unnecessary .zip.
      run: |
        npx playwright test --shard=${{ inputs.shard }}/${{ inputs.totalShards }} --update-snapshots
        git add src/\*.png --force
        mkdir updated-screenshots
        echo 'made dir'
        rsync -R --progress $(git diff --name-only --cached) updated-screenshots
        echo 'copied images'
        if [ -d updated-screenshots ]; then
          echo "hasUpdatedScreenshots=$(echo 'true')" >> $GITHUB_OUTPUT
          cd updated-screenshots
          ls
          zip -q -r ../UpdatedScreenshots-${{ inputs.shard }}-${{ inputs.totalShards }}.zip ./
        fi
      shell: bash
    - name: Archive Updated Screenshots
      if: inputs.update == 'true' && steps.test-and-update.outputs.hasUpdatedScreenshots == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: updated-screenshots-${{ inputs.shard }}-${{ inputs.totalShards }}
        path: UpdatedScreenshots-${{ inputs.shard }}-${{ inputs.totalShards }}.zip
    - name: Archive Test Results
      # The always() ensures that this step
      # runs even if the previous step fails.
      # We want the test results to be archived
      # even if the test fails in the previous
      # step, otherwise there would be no way
      # to debug these tests.
      if: always()
      uses: ./.github/workflows/actions/upload-archive
      with:
        name: test-results-${{ inputs.shard }}-${{ inputs.totalShards }}
        output: TestResults-${{ inputs.shard }}-${{ inputs.totalShards }}.zip
        paths: playwright-report